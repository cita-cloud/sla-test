apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CHAIN_NAME}-redis-config
data:
  redis-config: |
    bind 0.0.0.0
    dir /data
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    requirepass rivtower
    hz 10
    notify-keyspace-events Ex
    maxmemory 2048mb
    maxmemory-policy volatile-lru

---
apiVersion: v1
kind: ConfigMap
binaryData:
  private_key: NmI4YTM3YzE0NTZkYjQxNmVhZmQ0MWViYTYyYzc5ZWU0Njc2NDhhZDJjNzA4NDliYTU0M2VhZWM0YjZhMTQ3NQo=
data:
  node_address: 757ca1c731a3d7e9bdbd0e22ee65918674a77bd7
  validator_address: 757ca1c731a3d7e9bdbd0e22ee65918674a77bd7
metadata:
  name: ${CHAIN_NAME}-cache-crypto-account

---
apiVersion: v1
kind: ConfigMap
data:
  config.toml: |+
    [crypto_sm]
    crypto_port = 50005
    enable_metrics = true
    metrics_port = 60005
metadata:
  name: ${CHAIN_NAME}-cache-crypto-config

---
apiVersion: v1
kind: ConfigMap
data:
  Cache.toml: |+
    [default]
    address = "0.0.0.0"
    limits = { form = "64 kB", json = "1 MiB" }
    port = 8000
    controller_addr = "http://${CHAIN_NAME}-envoy:60004"
    executor_addr = "http://${CHAIN_NAME}-envoy:60002"
    crypto_addr = "http://127.0.0.1:50005"
    redis_addr = "redis://default:rivtower@127.0.0.1:6379"
    timing_internal_sec = 1
    timing_batch = 400
    account = "757ca1c731a3d7e9bdbd0e22ee65918674a77bd7"
    log_level = "normal"
    expire_time = 60
    rough_internal = 10
metadata:
  name: ${CHAIN_NAME}-cache-config

---
apiVersion: v1
kind: ConfigMap
data:
  crypto-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/crypto-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/crypto-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
metadata:
  name: ${CHAIN_NAME}-cache-crypto-log

---
apiVersion: v1
kind: Service
metadata:
  name: ${CHAIN_NAME}-cache
spec:
  ports:
    - name: cache
      port: 8000
      protocol: TCP
      targetPort: 8000
  selector:
    app.kubernetes.io/name: ${CHAIN_NAME}-cache
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: ${CHAIN_NAME}-cache
  name: ${CHAIN_NAME}-cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ${CHAIN_NAME}-cache
  serviceName: ""
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${CHAIN_NAME}-cache
    spec:
      containers:
        - command:
          - crypto
          - run
          - -c
          - /etc/cita-cloud/config/config.toml
          - -l
          - /etc/cita-cloud/log/crypto-log4rs.yaml
          - -p
          - /mnt/private_key
          image: "docker.io/citacloud/crypto_sm:${RELEASE_VERSION}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - grpc_health_probe
                - "-addr=127.0.0.1:50005"
            initialDelaySeconds: 30
            periodSeconds: 10
          name: crypto
          ports:
            - containerPort: 50005
              name: grpc
              protocol: TCP
          resources:
            limits:
              cpu: 4000m
              memory: 8192Mi
            requests:
              cpu: 10m
              memory: 32Mi
          volumeMounts:
            - mountPath: /etc/cita-cloud/config
              name: crypto-config
            - mountPath: /etc/cita-cloud/log
              name: crypto-log
            - mountPath: /mnt
              name: crypto-account
          workingDir: /data
        - command:
            - redis-server
            - "/redis-config/redis.conf"
          name: redis
          image: redis:7.0.5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
          resources:
            limits:
              cpu: 4000m
              memory: 8192Mi
            requests:
              cpu: 10m
              memory: 32Mi
          volumeMounts:
            - mountPath: /data
              name: datadir
            - mountPath: /redis-config
              name: redis-config
          workingDir: /data
        - command:
            - /bin/sh
            - "-c"
            - "ROCKET_CONFIG=/etc/cita-cloud/config/Cache.toml ROCKET_MAX_BLOCKING=2048 ROCKET_WORKERS=512 ROCKET_ACCOUNT=757ca1c731a3d7e9bdbd0e22ee65918674a77bd7 cache"
          name: cache
          image: "docker.io/citacloud/cache:v0.1.5"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: cache
              protocol: TCP
          resources:
            limits:
              cpu: 4000m
              memory: 8192Mi
            requests:
              cpu: 10m
              memory: 32Mi
          volumeMounts:
            - mountPath: /etc/cita-cloud/config
              name: cache-config
          workingDir: /data
      volumes:
        - configMap:
            name: ${CHAIN_NAME}-cache-crypto-account
          name: crypto-account
        - configMap:
            name: ${CHAIN_NAME}-cache-crypto-config
          name: crypto-config
        - configMap:
            name: ${CHAIN_NAME}-cache-crypto-log
          name: crypto-log
        - configMap:
            name: ${CHAIN_NAME}-cache-config
          name: cache-config
        - name: redis-config
          configMap:
            name: ${CHAIN_NAME}-redis-config
            items:
              - key: redis-config
                path: redis.conf
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: datadir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: ${SC}
