apiVersion: v1
kind: ConfigMap
data:
  consensus-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/consensus-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/consensus-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
  controller-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/controller-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/controller-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
  crypto-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/crypto-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/crypto-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
  executor-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/executor-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/executor-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
  network-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/network-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/network-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
  storage-log4rs.yaml: "# Scan this file for changes every 30 seconds\nrefresh_rate: 30 seconds\n\nappenders:\n# An appender named \"stdout\" that writes to stdout\n  stdout:\n    kind: console\n\n  journey-service:\n    kind: rolling_file\n    path: \"logs/storage-service.log\"\n    policy:\n      # Identifies which policy is to be used. If no kind is specified, it will\n      # default to \"compound\".\n      kind: compound\n      # The remainder of the configuration is passed along to the policy's\n      # deserializer, and will vary based on the kind of policy.\n      trigger:\n        kind: size\n        limit: 50mb\n      roller:\n        kind: fixed_window\n        base: 1\n        count: 5\n        pattern: \"logs/storage-service.{}.gz\"\n\n# Set the default logging level and attach the default appender to the root\nroot:\n  level: info\n  appenders:\n    - journey-service\n    - stdout\n\n# Quinn will continuously print unwanted logs at the info level: https://github.com/quinn-rs/quinn/issues/1322 \nloggers:\n  quinn:\n    level: warn\n"
metadata:
  labels:
    app.kubernetes.io/chain-name: sla-overlord
    app.kubernetes.io/chain-node: sla-overlord-node2
  name: sla-overlord-node2-log
